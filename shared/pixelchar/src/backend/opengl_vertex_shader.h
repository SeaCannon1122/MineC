#include <stdint.h>

uint8_t pixelchar_opengl_vertex_shader_code[] =
"#version 410 core\n"
"\n"
"uint VULKAN_PIXELFONT_INVALID = 255;\n"
"\n"
"uint PIXELCHAR_MASK_UNDERLINE = 1;\n"
"uint PIXELCHAR_MASK_CURSIVE = 2;\n"
"uint PIXELCHAR_MASK_SHADOW = 4;\n"
"uint PIXELCHAR_MASK_BACKGROUND = 8;\n"
"\n"
"uniform ivec2 screen_size;\n"
"uniform vec4 shadow_color_devisor;\n"
"uniform uint draw_mode;\n"
"\n"
"layout(location = 0) in uint in_bitmap_index;\n"
"layout(location = 1) in uint in_masks;\n"
"layout(location = 2) in uint in_font;\n"
"layout(location = 3) in uint in_font_resolution;\n"
"layout(location = 4) in uint in_scale;\n"
"layout(location = 5) in uint in_bitmap_width;\n"
"layout(location = 6) in ivec2 in_position;\n"
"layout(location = 7) in vec4 in_color;\n"
"layout(location = 8) in vec4 in_background_color;\n"
"\n"
"flat out uvec4 bitmap_index_I_masks_I_font_I_font_resolution;\n"
"flat out uint scale;\n"
"out vec2 fragment_position;\n"
"out vec4 color;\n"
"out vec4 background_color;\n"
"\n"
"void main()\n"
"{\n"
"    color = in_color;\n"
"    background_color = in_background_color;\n"
"    bitmap_index_I_masks_I_font_I_font_resolution = uvec4(in_bitmap_index, in_masks, in_font, in_font_resolution);\n"
"    scale = in_scale;\n"
"\n"
"    if ((draw_mode == 0 && (in_masks & PIXELCHAR_MASK_BACKGROUND) == 0) || (draw_mode == 1 && (in_masks & PIXELCHAR_MASK_SHADOW) == 0))\n"
"        gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\n"
"    else\n"
"    {\n"
"        ivec2 dimensions = ivec2((in_bitmap_width * in_scale * 8 + in_font_resolution - 1) / in_font_resolution, in_scale * 8);\n"
"        ivec2 vertex_position;\n"
"\n"
"        if (gl_VertexID % 4 == 0)\n"
"            vertex_position = ivec2(-dimensions.y / 16, -(dimensions.y + 15) / 16);\n"
"        else if (gl_VertexID % 4 == 1)\n"
"            vertex_position = ivec2(-dimensions.y / 16, 19 * dimensions.y / 16);\n"
"        else if (gl_VertexID % 4 == 2)\n"
"            vertex_position = ivec2(dimensions.x + (dimensions.y + 15) / 16, -(dimensions.y + 15) / 16);\n"
"        else if (gl_VertexID % 4 == 3)\n"
"            vertex_position = ivec2(dimensions.x + (dimensions.y + 15) / 16, 19 * dimensions.y / 16);\n"
"\n"
"        fragment_position = vec2(vertex_position);\n"
"\n"
"        vertex_position += in_position.xy;\n"
"\n"
"        vec2 vertex_position_f = vec2(vertex_position);\n"
"\n"
"        if ((in_masks & PIXELCHAR_MASK_CURSIVE) != 0)\n"
"            vertex_position_f.x -= float(vertex_position.y - int(scale) * 7) / 2.0;\n"
"\n"
"        if (draw_mode == 1)\n"
"            vertex_position_f += float(3 * int(in_scale) / 5 + 1);\n"
"\n"
"        gl_Position = vec4(vertex_position_f.x * 2.0 / float(screen_size.x) - 1.0, 1.0 - vertex_position_f.y * 2.0 / float(screen_size.y), 0.0, 1.0);\n"
"    }\n"
"\n"
"}";