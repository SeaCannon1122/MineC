#pragma once

#ifndef RESOURCES_H
#define RESOURCES_H

#include <general/resource_manager.h>

static const uint32_t default_image[] = {
	0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,   0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
	0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,   0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
	0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,   0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
	0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,   0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
	0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,   0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
	0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,   0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
	0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,   0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,
	0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,   0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,

	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,   0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,   0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,   0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,   0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,   0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,   0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,   0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,
	0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000,   0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff, 0xeff800ff,
};
static const uint32_t default_image_width = 16;
static const uint32_t default_image_height = 16;

enum resources_images {
	RESOURCE_IMAGE_DIRT,
	RESOURCE_IMAGE_STONE
};

static const uint8_t* const resources_image_tokens[] = {
	"dirt",
	"stone",
};

#define RESOURCES_IMAGES_COUNT sizeof(resources_image_tokens) / sizeof(resources_image_tokens[0])

enum resources_shaders {
	RESOURCE_SHADER_MENU_VERTEX,
	RESOURCE_SHADER_MENU_FRAGMENT,
};

static const uint8_t* const resources_shader_tokens[] = {
	"menu_vertex",
	"menu_fragment"
};

#define RESOURCES_SHADERS_COUNT sizeof(resources_shader_tokens) / sizeof(resources_shader_tokens[0])


enum resources_pixelfonts {
	RESOURCE_PIXEL_FONT_DEFAULT,
	RESOURCE_PIXEL_FONT_WIDE,
	RESOURCE_PIXEL_FONT_RECTANGULAR
};

static const uint8_t* const resources_pixelfont_tokens[] = {
	"default",
	"wide",
	"rectangular"
};

#define RESOURCES_PIXELFONTS_COUNT sizeof(resources_pixelfont_tokens) / sizeof(resources_pixelfont_tokens[0])

struct resource_state {

	uint8_t resource_manager_root_path[256];
	struct resource_manager resource_manager;

	//images
	struct resource_manager_image image_atlas[RESOURCES_IMAGES_COUNT];

	//pixelfonts
	struct pixel_font* pixelfont_atlas[RESOURCES_PIXELFONTS_COUNT];
	struct pixel_font* error_pixelfont;

};

struct game_client;

uint32_t resources_create(struct game_client* game, uint32_t* resource_path);

uint32_t resources_destroy(struct game_client* game);

uint32_t resources_reload(struct game_client* game);

#endif // !RESOURCES_H
